import { create } from "zustand";
import { AuthApi } from "@/shared/api/auth.api";
import { useAuthStore } from "@/shared/stores/auth-store";
import type {
  SendEmailVerificationRequest,
  VerifyEmailChangeRequest,
} from "@/shared/api/types";

interface ChangeEmailState {
  // UI state
  isOpen: boolean;
  isLoading: boolean;
  step: "email" | "code" | "success"; // –≠—Ç–∞–ø: –≤–≤–æ–¥ email, –≤–≤–æ–¥ –∫–æ–¥–∞ –∏–ª–∏ —É—Å–ø–µ—Ö
  resendTimer: number; // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  canResend: boolean; // –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∑–∞–Ω–æ–≤–æ

  // Form data
  oldEmail: string;
  newEmail: string;
  verificationCode: string;

  // Form errors
  newEmailError: boolean;
  newEmailErrorMessage: string;
  codeError: boolean;
  codeErrorMessage: string;

  // Actions
  openPopup: (currentEmail: string) => void;
  closePopup: () => void;
  setLoading: (loading: boolean) => void;
  setStep: (step: "email" | "code" | "success") => void;
  setResendTimer: (timer: number) => void;
  setCanResend: (canResend: boolean) => void;

  // Form setters
  setNewEmail: (email: string) => void;
  setVerificationCode: (code: string) => void;

  // Error setters
  setNewEmailError: (error: boolean, message?: string) => void;
  setCodeError: (error: boolean, message?: string) => void;

  // Validation
  validateNewEmail: () => boolean;
  validateCode: () => boolean;

  // Reset form
  resetForm: () => void;

  // Clear errors
  clearErrors: () => void;

  // Timer management
  startResendTimer: () => void;

  // Actions
  sendCode: () => Promise<boolean>;
  verifyCode: () => Promise<boolean>;
}

// Validation function
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export const useChangeEmailStore = create<ChangeEmailState>((set, get) => ({
  // Initial state
  isOpen: false,
  isLoading: false,
  step: "email",
  resendTimer: 0,
  canResend: true,
  oldEmail: "",
  newEmail: "",
  verificationCode: "",
  newEmailError: false,
  newEmailErrorMessage: "",
  codeError: false,
  codeErrorMessage: "",

  // UI actions
  openPopup: (currentEmail: string) =>
    set({
      isOpen: true,
      step: "email",
      oldEmail: currentEmail,
      newEmail: "",
      verificationCode: "",
      newEmailError: false,
      newEmailErrorMessage: "",
      codeError: false,
      codeErrorMessage: "",
    }),
  closePopup: () => set({ isOpen: false }),
  setLoading: (loading: boolean) => set({ isLoading: loading }),
  setStep: (step: "email" | "code" | "success") => set({ step }),
  setResendTimer: (timer: number) => set({ resendTimer: timer }),
  setCanResend: (canResend: boolean) => set({ canResend }),

  // Form setters
  setNewEmail: (newEmail: string) => {
    set({ newEmail });
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  },

  setVerificationCode: (verificationCode: string) => {
    set({ verificationCode });
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (get().codeError && verificationCode.length > 0) {
      set({ codeError: false, codeErrorMessage: "" });
    }
  },

  // Error setters
  setNewEmailError: (error: boolean, message: string = "") =>
    set({
      newEmailError: error,
      newEmailErrorMessage: message,
    }),

  setCodeError: (error: boolean, message: string = "") =>
    set({
      codeError: error,
      codeErrorMessage: message,
    }),

  // Validation
  validateNewEmail: () => {
    const state = get();
    const trimmedEmail = state.newEmail.trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
    if (!trimmedEmail) {
      set({
        newEmailError: true,
        newEmailErrorMessage: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É",
      });
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ø–æ—á—Ç—É
    if (trimmedEmail === state.oldEmail) {
      set({
        newEmailError: true,
        newEmailErrorMessage: "–ù–æ–≤–∞—è –ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π",
      });
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    if (!validateEmail(trimmedEmail)) {
      set({
        newEmailError: true,
        newEmailErrorMessage: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã",
      });
      return false;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (trimmedEmail.length < 5) {
      set({
        newEmailError: true,
        newEmailErrorMessage: "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã",
      });
      return false;
    }

    if (trimmedEmail.length > 254) {
      set({
        newEmailError: true,
        newEmailErrorMessage: "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã",
      });
      return false;
    }

    set({ newEmailError: false, newEmailErrorMessage: "" });
    return true;
  },

  validateCode: () => {
    const state = get();
    const trimmedCode = state.verificationCode.trim();

    if (!trimmedCode) {
      set({
        codeError: true,
        codeErrorMessage: "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
      });
      return false;
    }

    if (trimmedCode.length !== 6) {
      set({
        codeError: true,
        codeErrorMessage: "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä",
      });
      return false;
    }

    if (!/^\d{6}$/.test(trimmedCode)) {
      set({
        codeError: true,
        codeErrorMessage: "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
      });
      return false;
    }

    set({ codeError: false, codeErrorMessage: "" });
    return true;
  },

  // Reset form
  resetForm: () => {
    set({
      step: "email",
      newEmail: "",
      verificationCode: "",
      newEmailError: false,
      newEmailErrorMessage: "",
      codeError: false,
      codeErrorMessage: "",
      isLoading: false,
      resendTimer: 0,
      canResend: true,
    });
  },

  // Clear errors manually
  clearErrors: () => {
    set({
      newEmailError: false,
      newEmailErrorMessage: "",
      codeError: false,
      codeErrorMessage: "",
    });
  },

  // Timer management
  startResendTimer: () => {
    set({ canResend: false, resendTimer: 30 });

    const interval = setInterval(() => {
      const currentTimer = get().resendTimer;
      if (currentTimer <= 1) {
        set({ canResend: true, resendTimer: 0 });
        clearInterval(interval);
      } else {
        set({ resendTimer: currentTimer - 1 });
      }
    }, 1000);
  },

  // Send code to new email
  sendCode: async () => {
    const state = get();

    if (!state.validateNewEmail()) {
      return false;
    }

    set({ isLoading: true });

    try {
      const sendCodeData: SendEmailVerificationRequest = {
        newEmail: state.newEmail,
      };

      await AuthApi.sendEmailVerification(sendCodeData);

      set({ isLoading: false, step: "code" });
      return true;
    } catch (error: any) {
      console.error("Error sending code:", error);

      let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞";

      if (error?.response?.status === 400) {
        errorMessage = error.response.data?.message || "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email";
      } else if (error?.response?.status === 409) {
        errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
      }

      set({
        isLoading: false,
        newEmailError: true,
        newEmailErrorMessage: errorMessage,
      });
      return false;
    }
  },

  // Verify code and change email
  verifyCode: async () => {
    const state = get();

    console.log("üîç [ChangeEmailStore] Starting code verification:", {
      oldEmail: state.oldEmail,
      newEmail: state.newEmail,
      code: state.verificationCode,
      codeLength: state.verificationCode.length,
    });

    if (!state.validateCode()) {
      console.log("‚ùå [ChangeEmailStore] Code validation failed");
      return false;
    }

    set({ isLoading: true });

    try {
      const verifyData: VerifyEmailChangeRequest = {
        newEmail: state.newEmail,
        code: state.verificationCode,
      };

      console.log(
        "üì§ [ChangeEmailStore] Sending verification request:",
        verifyData
      );
      const updatedUser = await AuthApi.verifyEmailChange(verifyData);
      console.log("‚úÖ [ChangeEmailStore] Email change successful:", {
        oldEmail: state.oldEmail,
        newEmail: updatedUser.email,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ auth store
      const authStore = useAuthStore.getState();
      authStore.updateUser(updatedUser);

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —É—Å–ø–µ—Ö–∞
      set({
        isLoading: false,
        step: "success",
        oldEmail: updatedUser.email, // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π email –Ω–∞ –Ω–æ–≤—ã–π
      });
      return true;
    } catch (error: any) {
      console.error("‚ùå [ChangeEmailStore] Error verifying code:", {
        error: error.message,
        status: error?.response?.status,
        data: error?.response?.data,
        sentCode: state.verificationCode,
        sentEmail: state.newEmail,
      });

      let errorMessage = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥";

      if (error?.response?.status === 400) {
        errorMessage = error.response.data?.message || "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥";
      } else if (error?.response?.status === 401) {
        errorMessage = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É";
      }

      set({
        isLoading: false,
        codeError: true,
        codeErrorMessage: errorMessage,
      });
      return false;
    }
  },
}));
