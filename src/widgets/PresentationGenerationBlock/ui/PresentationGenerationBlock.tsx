"use client";

import React, { useEffect, useState, useRef } from "react";
import { PresentationHeader } from "@/features/PresentationHeader";
import { SlidesSidebar } from "@/features/SlidesSidebar";
import { SlideCanvas } from "@/features/SlideCanvas";
import { ToolsPanel } from "@/features/ToolsPanel";
import { SlideContent, getSlideType } from "@/entities/SlideContent";
import { SlidePreviewContent } from "@/entities/SlidePreviewContent";
import { type ElementOption } from "@/features/ElementSelector";
import { usePresentationStore } from "@/shared/stores/usePresentationStore";
import { usePresentationFlowStore } from "@/shared/stores/usePresentationFlowStore";
import {
  useGenerateSlidesForStructureNew,
  getMultipleTemplates,
} from "@/shared/api/presentation-generation";
import {
  useMixedImageGeneration,
  useFluxImageGeneration,
} from "@/shared/api/images";

import SideBarIcon from "../../../../public/icons/SideBarIcon";
import AlphabetIcon from "../../../../public/icons/AlphabetIcon";
import PictureIcon from "../../../../public/icons/PictureIcon";
import GrayTableIcon from "../../../../public/icons/GrayTableIcon";
import GraphIcon from "../../../../public/icons/GraphIcon";
import { Mascot } from "@/shared/ui/Mascot";

export const PresentationGenerationBlock = () => {
  const {
    currentSlide,
    generatedSlides,
    isGenerating,
    isSidebarCollapsed,
    isToolsPanelCollapsed,
    toggleSidebar,
    setIsGenerating,
    setSlideTemplates,
    setTotalSlides,
  } = usePresentationStore();

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ PresentationFlowStore –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–∞–π–¥–æ–≤
  const { uiSlides } = usePresentationFlowStore();

  // API —Ö—É–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
  const generateSlidesMutation = useGenerateSlidesForStructureNew();

  // API —Ö—É–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const fluxImageMutation = useFluxImageGeneration();
  const mixedImageMutation = useMixedImageGeneration();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [generationProgress, setGenerationProgress] = useState(0);
  const [generationStatus, setGenerationStatus] = useState<string>("");

  // Ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const hasStartedGeneration = useRef(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Unsplash –Ω–∞ –Ω–∞—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
  const replaceUnsplashImagesWithGenerated = async (
    result: any,
    imageSource: string
  ) => {
    console.log("üñºÔ∏è Checking if images need replacement...");
    console.log("üîç Image source:", imageSource);
    console.log("üîç Result data:", result?.data);

    if (!result?.data?.slides) {
      console.log("‚ùå No slides found in result");
      return result;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ "–ò–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º Unsplash –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    // –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–∞—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    if (imageSource === "–ò–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞" || imageSource === "internet") {
      console.log("üîÑ Image source is '–ò–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞', keeping Unsplash images");
      return result;
    }

    console.log(
      "üöÄ Image source requires generated images, proceeding with replacement..."
    );

    const slides = result.data.slides;
    let hasUnsplashImages = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Unsplash
    for (let slide of slides) {
      console.log("üîç Checking slide:", slide.title);
      if (slide._images && slide._images.length > 0) {
        console.log("üîç Slide images:", slide._images);
        for (let imageUrl of slide._images) {
          console.log("üîç Checking image URL:", imageUrl);
          if (
            imageUrl.includes("images.unsplash.com") ||
            imageUrl.includes("unsplash.com")
          ) {
            console.log("‚úÖ Found Unsplash image:", imageUrl);
            hasUnsplashImages = true;
            break;
          }
        }
      }
      if (hasUnsplashImages) break;
    }

    console.log("üîç Has Unsplash images:", hasUnsplashImages);

    if (!hasUnsplashImages) {
      console.log("‚úÖ No Unsplash images found, no replacement needed");
      return result;
    }

    console.log("üîÑ Found Unsplash images, generating replacements...");
    setGenerationStatus("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...");

    try {
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const updatedResult = JSON.parse(JSON.stringify(result));

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ª–∞–π–¥
      for (let i = 0; i < updatedResult.data.slides.length; i++) {
        const slide = updatedResult.data.slides[i];

        if (slide._images && slide._images.length > 0) {
          const newImages = [];

          for (let imageUrl of slide._images) {
            console.log(`üîç Processing image URL: ${imageUrl}`);
            if (
              imageUrl.includes("images.unsplash.com") ||
              imageUrl.includes("unsplash.com")
            ) {
              console.log(
                `üîÑ Replacing Unsplash image for slide ${i + 1}: ${imageUrl}`
              );

              try {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–∞
                const slidePrompt = createImagePromptFromSlide(
                  slide,
                  result.data.deck?.title || ""
                );
                console.log(
                  `üñºÔ∏è Generated prompt for slide ${i + 1}: ${slidePrompt}`
                );

                let generatedImageUrl;

                console.log(
                  `üöÄ Starting image generation with source: ${imageSource}`
                );

                if (imageSource === "Flux") {
                  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Flux
                  console.log("üé® Using Flux API for image generation");
                  const fluxResult = await fluxImageMutation.mutateAsync({
                    prompt: slidePrompt,
                    count: 1,
                    size: "1024x1024",
                  });
                  console.log("üé® Flux API result:", fluxResult);
                  generatedImageUrl = fluxResult.data?.urls?.[0];
                } else {
                  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–≤–∫–ª—é—á–∞—è "–°–º–µ—à–∞–Ω–Ω—ã–π", "investors", etc.) –∏—Å–ø–æ–ª—å–∑—É–µ–º Mixed API
                  console.log("üé≠ Using Mixed API for image generation");
                  const mixedResult = await mixedImageMutation.mutateAsync({
                    model: "flux",
                    count: 1,
                    prompts: [slidePrompt],
                    fluxSize: "1024x1024",
                  });
                  console.log("üé≠ Mixed API result:", mixedResult);
                  generatedImageUrl = mixedResult.data?.images?.[0];
                }

                if (generatedImageUrl) {
                  console.log(
                    `‚úÖ Generated new image for slide ${i + 1}:`,
                    generatedImageUrl
                  );
                  newImages.push(generatedImageUrl);
                } else {
                  console.warn(
                    `‚ö†Ô∏è Failed to generate image for slide ${
                      i + 1
                    }, keeping original`
                  );
                  newImages.push(imageUrl);
                }
              } catch (imageError) {
                console.error(
                  `‚ùå Error generating image for slide ${i + 1}:`,
                  imageError
                );
                newImages.push(imageUrl); // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
              }
            } else {
              // –≠—Ç–æ —É–∂–µ –Ω–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ TTapi –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              newImages.push(imageUrl);
            }
          }

          slide._images = newImages;
        }
      }

      console.log("‚úÖ Image replacement completed");
      return updatedResult;
    } catch (error) {
      console.error("‚ùå Error during image replacement:", error);
      return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–∞–π–¥–∞
  const createImagePromptFromSlide = (
    slide: any,
    deckTitle: string
  ): string => {
    const slideTitle = slide.title || "";
    const slideSubtitle = slide.subtitle || "";

    console.log("üîç Creating prompt from slide:", {
      slideTitle,
      slideSubtitle,
      deckTitle,
    });

    // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–ª–∞–π–¥–∞
    let prompt = `Professional business illustration about "${slideTitle}"`;

    if (slideSubtitle) {
      prompt += `, ${slideSubtitle}`;
    }

    if (deckTitle) {
      prompt += `, in context of "${deckTitle}"`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è
    prompt +=
      ", clean modern design, professional, high quality, business style, minimal background, corporate, digital art";

    console.log("‚úÖ Generated prompt:", prompt);
    return prompt;
  };

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ uiSlides
  useEffect(() => {
    if (uiSlides && uiSlides.length > 0) {
      console.log("Setting total slides from store:", uiSlides.length);
      setTotalSlides(uiSlides.length);
    }
  }, [uiSlides, setTotalSlides]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log("üîÑ PresentationGenerationBlock useEffect called");
    // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞
    if (hasStartedGeneration.current) {
      console.log("‚è≠Ô∏è Generation already started, skipping");
      return;
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –¥–∞–∂–µ –¥–æ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const presentationDataStr = localStorage.getItem(
      "presentationGenerationData"
    );
    if (presentationDataStr) {
      try {
        const presentationData = JSON.parse(presentationDataStr);
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–Ω–Ω—ã–º –∏–∑ localStorage, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const slidesCount =
          presentationData.uiSlides?.length || uiSlides?.length || 3;
        console.log(
          "üî¢ Early setting total slides to:",
          slidesCount,
          "from localStorage data"
        );
        setTotalSlides(slidesCount);
      } catch (error) {
        console.error(
          "Error parsing presentation data for slides count:",
          error
        );
      }
    }

    const startGeneration = async () => {
      console.log("üöÄ startGeneration function called");
      try {
        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å
        hasStartedGeneration.current = true;
        console.log("‚úÖ Generation marked as started");

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å templateIds –≤ localStorage
        const existingPresentationStr = localStorage.getItem(
          "generatedPresentation"
        );
        if (existingPresentationStr) {
          const existingPresentation = JSON.parse(existingPresentationStr);
          console.log(
            "Found existing presentation in localStorage:",
            existingPresentation
          );

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ templateIds –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          const existingTemplateIds =
            existingPresentation?.data?.templateIds ||
            existingPresentation?.templateIds;
          if (existingTemplateIds && existingTemplateIds.length > 0) {
            console.log("Found existing templateIds:", existingTemplateIds);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ templateIds
            console.log("Setting total slides to:", existingTemplateIds.length);
            setTotalSlides(existingTemplateIds.length);

            setGenerationStatus("–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
            setGenerationProgress(50);

            try {
              const templates = await getMultipleTemplates(existingTemplateIds);
              console.log(
                "Templates loaded from existing data:",
                Object.keys(templates)
              );

              // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É templateIds –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å–ª–∞–π–¥–æ–≤
              const slideTemplateMapping: Record<string, string> = {};
              existingTemplateIds.forEach(
                (templateId: string, index: number) => {
                  const slideNumber = index + 1;
                  const slideKey = `slide_${slideNumber}`;
                  if (templates[templateId]) {
                    slideTemplateMapping[slideKey] = templates[templateId];
                  }
                }
              );

              console.log(
                "Slide template mapping from existing data:",
                Object.keys(slideTemplateMapping)
              );
              setSlideTemplates(slideTemplateMapping);
              setGenerationProgress(100);
              setIsGenerating(false);
              return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            } catch (templateError) {
              console.error(
                "Error loading templates from existing data:",
                templateError
              );
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
            }
          }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å templateIds, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        console.log("üì¶ Checking localStorage for presentation data...");
        const presentationDataStr = localStorage.getItem(
          "presentationGenerationData"
        );
        console.log(
          "üì¶ localStorage data:",
          presentationDataStr ? "Found" : "Not found"
        );

        if (!presentationDataStr) {
          console.error("‚ùå No presentation data found in localStorage");
          // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
          setIsGenerating(false);
          return;
        }

        const presentationData = JSON.parse(presentationDataStr);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–Ω–Ω—ã–º –∏–∑ store, –∑–∞—Ç–µ–º –∏–∑ localStorage, –∑–∞—Ç–µ–º fallback
        const slidesCount =
          presentationData.uiSlides?.length || uiSlides?.length || 3;
        console.log("üìä Slides count from data:", {
          "presentationData.uiSlides.length": presentationData.uiSlides?.length,
          "uiSlides.length": uiSlides?.length,
          "final slidesCount": slidesCount,
        });
        setTotalSlides(slidesCount);
        console.log(
          "Starting presentation generation with data:",
          presentationData
        );

        setIsGenerating(true);
        setGenerationStatus("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...");
        setGenerationProgress(50);

        try {
          // –í—ã–∑—ã–≤–∞–µ–º API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
          console.log("üöÄ Calling generateSlidesMutation with data:", {
            ...presentationData,
            uiSlides: presentationData.uiSlides?.length || 0,
          });
          console.log("üìä Full presentation data:", presentationData);

          const result = await generateSlidesMutation.mutateAsync(
            presentationData
          );

          console.log("‚úÖ Presentation generated successfully:", result);

          // –ó–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Unsplash –Ω–∞ –Ω–∞—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
          let finalResult = result;
          try {
            finalResult = await replaceUnsplashImagesWithGenerated(
              result,
              presentationData.imageSource || "–°–º–µ—à–∞–Ω–Ω—ã–π"
            );
            console.log("‚úÖ Image replacement completed");
          } catch (imageReplacementError) {
            console.error(
              "‚ùå Error during image replacement:",
              imageReplacementError
            );
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
          }

          // –ü–æ–ª—É—á–∞–µ–º templateIds –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          const templateIds =
            (finalResult as any).data?.templateIds ||
            finalResult.templateIds ||
            [];
          console.log("Template IDs from API:", templateIds);
          console.log("templateIds.length:", templateIds.length);

          // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —à–∞–±–ª–æ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å templateIds
          if (templateIds.length > 0) {
            console.log("Starting template loading process...");
            setGenerationStatus("–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤...");
            setGenerationProgress(75);

            try {
              console.log("Calling getMultipleTemplates with:", templateIds);
              const templates = await getMultipleTemplates(templateIds);
              console.log(
                "Templates loaded successfully:",
                Object.keys(templates)
              );
              console.log("Template data:", templates);

              // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É templateIds –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å–ª–∞–π–¥–æ–≤
              // templateIds[0] -> slide 1, templateIds[1] -> slide 2, etc.
              const slideTemplateMapping: Record<string, string> = {};
              templateIds.forEach((templateId: string, index: number) => {
                const slideNumber = index + 1;
                const slideKey = `slide_${slideNumber}`;
                if (templates[templateId]) {
                  slideTemplateMapping[slideKey] = templates[templateId];
                  console.log(`Mapped ${templateId} -> ${slideKey}`);
                }
              });

              console.log(
                "Final slide template mapping:",
                Object.keys(slideTemplateMapping)
              );
              setSlideTemplates(slideTemplateMapping);
            } catch (templateError) {
              console.error("Error loading templates:", templateError);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            }
          } else {
            console.log("No templateIds found in response");
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –≤ localStorage –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
          const generatedPresentation = {
            ...finalResult, // Save the complete API response with replaced images
            deckTitle: presentationData.deckTitle,
          };

          localStorage.setItem(
            "generatedPresentation",
            JSON.stringify(generatedPresentation)
          );

          setGenerationProgress(100);
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          setIsGenerating(false);
        } catch (generationError) {
          console.error("‚ùå Error during slide generation:", generationError);
          setGenerationStatus("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–æ–≤");
          setIsGenerating(false);
        }
      } catch (error) {
        console.error("Error generating presentation:", error);
        setGenerationStatus("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏");
        setIsGenerating(false);
      }
    };

    console.log("üéØ About to call startGeneration");
    startGeneration();
  }, []);

  const elementOptions: ElementOption[] = [
    {
      id: "text",
      label: "–¢–µ–∫—Å—Ç",
      icon: <AlphabetIcon />,
    },
    {
      id: "image",
      label: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
      icon: <PictureIcon />,
    },
    {
      id: "table",
      label: "–¢–∞–±–ª–∏—Ü–∞",
      icon: <GrayTableIcon />,
    },
    {
      id: "chart",
      label: "–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞",
      icon: <GraphIcon />,
    },
  ];

  const handleBack = () => {
    // –£–±–∏—Ä–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log("Back button clicked - staying on current page");
  };

  const handleDownload = () => {
    console.log("Download presentation");
    // Implement download logic
  };

  const handleShare = () => {
    console.log("Share presentation");
    // Implement share logic
  };

  const handleChangeDesign = () => {
    console.log("Change design");
    // Implement design change
  };

  const handleToggleSidebar = () => {
    toggleSidebar();
  };

  const renderSlideContent = (slideNumber: number) => {
    return (
      <SlidePreviewContent
        slideNumber={slideNumber}
        isGenerated={generatedSlides.includes(slideNumber)}
        isCurrentlyGenerating={
          isGenerating && slideNumber === generatedSlides.length + 1
        }
      />
    );
  };

  const renderMainSlideContent = () => {
    const slideType = getSlideType(currentSlide);
    const isCurrentSlideGenerating =
      isGenerating && currentSlide === generatedSlides.length + 1;

    return (
      <SlideContent
        slideNumber={currentSlide}
        slideType={slideType}
        isGenerating={isCurrentSlideGenerating}
      />
    );
  };

  return (
    <div className="h-screen bg-[#F8F9FA] flex overflow-hidden">
      <div className="flex-1 flex-col">
        <PresentationHeader
          onBack={handleBack}
          onDownload={handleDownload}
          onChangeDesign={handleChangeDesign}
          onShare={handleShare}
          isGenerating={isGenerating}
        />

        <div className="flex-1 flex relative min-h-0">
          {isSidebarCollapsed && (
            <button
              onClick={handleToggleSidebar}
              className="w-[32px] h-[32px] absolute flex items-center justify-center cursor-pointer rounded-[8px] bg-[#BBA2FE] ease-in-out duration-300 transition-colors ml-4 mt-4"
            >
              <SideBarIcon color="white" />
            </button>
          )}

          <SlidesSidebar renderSlideContent={renderSlideContent} />
          <SlideCanvas />

          {!isToolsPanelCollapsed && (
            <ToolsPanel elementOptions={elementOptions} />
          )}
        </div>
      </div>
    </div>
  );
};
