"use client";

import { create } from "zustand";
import { persist } from "zustand/middleware";
import type { User } from "@/shared/api/types";
import { AuthApi } from "@/shared/api/auth.api";

interface AuthStore {
  // State
  accessToken: string | null;
  refreshToken: string | null;
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  _hasHydrated: boolean;

  // Actions
  setTokens: (accessToken: string, refreshToken: string) => void;
  setUser: (user: User | null) => void;
  setLoading: (loading: boolean) => void;
  logout: () => Promise<void>;
  initializeAuth: () => Promise<void>;
  clearAuth: () => void;
  updateUser: (userData: Partial<User>) => void;
  setHasHydrated: (hasHydrated: boolean) => void;
}

export const useAuthStore = create<AuthStore>()(
  persist(
    (set, get) => ({
      // Initial state
      accessToken: null,
      refreshToken: null,
      user: null,
      isAuthenticated: false,
      isLoading: false,
      _hasHydrated: false,

      // Actions
      setTokens: (accessToken: string, refreshToken: string) => {
        set({
          accessToken,
          refreshToken,
          isAuthenticated: true,
        });

        // –î—É–±–ª–∏—Ä—É–µ–º –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (typeof window !== "undefined") {
          localStorage.setItem("accessToken", accessToken);
          localStorage.setItem("refreshToken", refreshToken);
        }
      },

      setUser: (user: User | null) => {
        set({
          user,
          isAuthenticated: !!user,
        });

        // –î—É–±–ª–∏—Ä—É–µ–º –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (typeof window !== "undefined") {
          if (user) {
            localStorage.setItem("user", JSON.stringify(user));
          } else {
            localStorage.removeItem("user");
          }
        }
      },

      setLoading: (isLoading: boolean) => {
        set({ isLoading });
      },

      setHasHydrated: (hasHydrated: boolean) => {
        set({ _hasHydrated: hasHydrated });
      },

      logout: async () => {
        try {
          set({ isLoading: true });

          // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –≤—ã—Ö–æ–¥–∞
          await AuthApi.logout();
        } catch (error) {
          console.error("Logout error:", error);
        } finally {
          // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
          get().clearAuth();

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
          if (typeof window !== "undefined") {
            // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
            localStorage.clear();

            // –ò–ª–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ):
            // const keysToKeep = ['theme', 'language']; // –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            // Object.keys(localStorage).forEach(key => {
            //   if (!keysToKeep.includes(key)) {
            //     localStorage.removeItem(key);
            //   }
            // });
          }
        }
      },

      initializeAuth: async () => {
        try {
          set({ isLoading: true });

          const state = get();
          const token =
            state.accessToken || localStorage.getItem("accessToken");
          const userData = state.user
            ? JSON.stringify(state.user)
            : localStorage.getItem("user");

          if (!token) {
            set({ isLoading: false });
            return;
          }

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ localStorage
          if (!state.accessToken && token) {
            const refreshToken = localStorage.getItem("refreshToken");
            set({
              accessToken: token,
              refreshToken: refreshToken || null,
            });
          }

          if (userData) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            const user = JSON.parse(userData);
            set({
              user,
              isAuthenticated: true,
              isLoading: false,
            });
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –∏—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
            try {
              const user = await AuthApi.getProfile();
              get().setUser(user);
              set({
                isAuthenticated: true,
                isLoading: false,
              });
            } catch (error) {
              console.error("Failed to get user profile:", error);
              // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º auth –¥–∞–Ω–Ω—ã–µ
              get().clearAuth();
            }
          }
        } catch (error) {
          console.error("Auth initialization error:", error);
          get().clearAuth();
        }
      },

      clearAuth: () => {
        set({
          accessToken: null,
          refreshToken: null,
          user: null,
          isAuthenticated: false,
          isLoading: false,
        });

        // –û—á–∏—â–∞–µ–º localStorage
        if (typeof window !== "undefined") {
          // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ auth –¥–∞–Ω–Ω—ã—Ö
          localStorage.removeItem("accessToken");
          localStorage.removeItem("refreshToken");
          localStorage.removeItem("user");

          // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Zustand persist
          localStorage.removeItem("auth-storage");

          // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
          localStorage.removeItem("presentationGenerationData");

          // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          Object.keys(localStorage).forEach((key) => {
            if (
              key.includes("token") ||
              key.includes("auth") ||
              key.includes("presentation")
            ) {
              localStorage.removeItem(key);
            }
          });

          console.log("üßπ [Auth] localStorage cleared on token expiration");
        }
      },

      updateUser: (userData: Partial<User>) => {
        const currentUser = get().user;
        if (currentUser) {
          const updatedUser = { ...currentUser, ...userData };
          get().setUser(updatedUser);
        }
      },
    }),
    {
      name: "auth-storage",
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      partialize: (state) => ({
        accessToken: state.accessToken,
        refreshToken: state.refreshToken,
        user: state.user,
        isAuthenticated: state.isAuthenticated,
      }),
      onRehydrateStorage: () => (state) => {
        state?.setHasHydrated(true);
      },
    }
  )
);

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const getAuthToken = (): string | null => {
  const state = useAuthStore.getState();
  return state.accessToken;
};

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ logout –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ç–æ–∫–µ–Ω–∞
export const forceLogout = (reason = "Token expired") => {
  console.log(`üö™ [Auth] Force logout: ${reason}`);

  const authStore = useAuthStore.getState();
  authStore.clearAuth();

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
  if (typeof window !== "undefined") {
    localStorage.clear();

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    window.location.href = "/login";
  }
};
