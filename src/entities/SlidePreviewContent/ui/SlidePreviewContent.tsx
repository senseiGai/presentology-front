"use client";

import React, { useEffect, useState } from "react";
import PreviewGenerationLoaderIcon from "../../../../public/icons/PreviewGenerationLoaderIcon";
import { usePresentationStore } from "@/shared/stores/usePresentationStore";
import { getSlideType } from "@/entities/SlideContent";

interface SlidePreviewContentProps {
  slideNumber: number;
  isGenerated: boolean;
  isCurrentlyGenerating: boolean;
}

export const SlidePreviewContent: React.FC<SlidePreviewContentProps> = ({
  slideNumber,
  isGenerated,
  isCurrentlyGenerating,
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const [forceUpdateCount, forceUpdate] = useState(0);
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ hydration errors
  const [isMounted, setIsMounted] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ store –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const {
    textElementContents,
    textElementStyles,
    textElementPositions,
    tableElements,
    imageElements,
    slideTemplates,
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    selectedTextElement,
    zoomLevel,
  } = usePresentationStore();

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º hydration errors
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  useEffect(() => {
    if (!isMounted) return; // –ñ–¥–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

    console.log(
      "SlidePreviewContent useEffect triggered for slide:",
      slideNumber
    );
    forceUpdate((prev) => prev + 1);
  }, [
    isMounted,
    textElementContents,
    textElementPositions,
    textElementStyles,
    tableElements,
    imageElements,
    slideTemplates,
    selectedTextElement,
    slideNumber,
  ]);

  if (!isGenerated && !isCurrentlyGenerating) {
    return (
      <div className="w-full h-full bg-[#F7FAFC] rounded-[4px] flex items-center justify-center">
        <div className="w-6 h-6 bg-[#E2E8F0] rounded-full" />
      </div>
    );
  }

  if (isCurrentlyGenerating) {
    return (
      <div className="w-full h-full bg-white rounded-[4px] flex items-center justify-center relative border-[1px] border-[#F4F4F4]">
        <div className="absolute inset-0 bg-white rounded-[4px]" />
        <PreviewGenerationLoaderIcon className="animate-spin" />
      </div>
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML —à–∞–±–ª–æ–Ω–µ –Ω–∞ –Ω–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ SlideContent)
  const replaceTemplateImagesWithOurs = (html: string): string => {
    if (!html) return html;

    const slideImageElements = imageElements[slideNumber] || {};
    const ourImages = Object.values(slideImageElements);

    if (ourImages.length === 0) {
      return html; // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML
    }

    // –°–æ–∑–¥–∞–µ–º DOM parser –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTML
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, "text/html");
    const images = doc.querySelectorAll("img");

    // –ó–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ –Ω–∞ –Ω–∞—à–∏
    images.forEach((img, index) => {
      if (index < ourImages.length && ourImages[index].src) {
        img.src = ourImages[index].src;
        if (ourImages[index].alt) {
          img.alt = ourImages[index].alt;
        }
        console.log(
          `üñºÔ∏è [Preview] Replaced template image ${index} with our image:`,
          ourImages[index].src
        );
      }
    });

    return doc.documentElement.outerHTML;
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–ª–∞–π–¥–∞
  const slideType = getSlideType(slideNumber);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
  const getElementContent = (elementId: string, fallback: string = "") => {
    return textElementContents[elementId] || fallback;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
  const getElementPosition = (elementId: string) => {
    const position = textElementPositions[elementId] ||
      textElementStyles[elementId] || { x: 0, y: 0 };
    return position;
  };

  // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã (—Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ SlidePreview)
  const SCALE = 0.18; // –ü–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 140x79
  const PREVIEW_WIDTH = 140; // –†–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ SlidePreview
  const PREVIEW_HEIGHT = 79; // –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ SlidePreview
  const ORIGINAL_WIDTH = 759;
  const ORIGINAL_HEIGHT = 427;

  // –†–µ–Ω–¥–µ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∏–Ω–∏–∞—Ç—é—Ä–µ
  const renderPreviewTextElements = () => {
    const slideType = getSlideType(slideNumber);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–ª–∞–π–¥–∞
    let staticElementIds: string[] = [];

    if (slideType === "title") {
      staticElementIds = ["title-main", "title-sub"];
    } else {
      // –î–ª—è default —Å–ª–∞–π–¥–æ–≤
      staticElementIds = [`slide-${slideNumber}-text`];
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ textElementContents
    // —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const allElementIds = Object.keys(textElementContents).filter(
      (elementId) => {
        // –í–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ª–∞–π–¥–∞
        if (staticElementIds.includes(elementId)) {
          return true;
        }
        // –í–∫–ª—é—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Å–ª–∞–π–¥–∞
        return (
          elementId.includes(`slide-${slideNumber}-`) &&
          !staticElementIds.includes(elementId)
        );
      }
    );

    console.log(
      `Rendering preview text elements for slide ${slideNumber}:`,
      allElementIds
    );

    return allElementIds
      .map((elementId) => {
        const position = getElementPosition(elementId);
        const content = textElementContents[elementId];
        const elementStyles = textElementStyles[elementId] || {};

        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        if (!content || content.trim() === "") {
          return null;
        }

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
        const scaledX = (position.x || 0) * SCALE;
        const scaledY = (position.y || 0) * SCALE;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –µ–≥–æ —Å—Ç–∏–ª–µ–π
        let fontSize = "3px";
        let fontWeight = "normal";
        let color = "#6B7280";

        if (elementId === "title-main") {
          fontSize = "4px";
          fontWeight = "bold";
          color = "white";
        } else if (elementId === "title-sub") {
          fontSize = "2.5px";
          fontWeight = "light";
          color = "rgba(255, 255, 255, 0.8)";
        } else if (elementId === `slide-${slideNumber}-text`) {
          fontSize = "3px";
          color = "#6B7280";
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∏–∑ store –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (elementStyles.fontSize) {
          // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
          const scaledFontSize = Math.max(
            2,
            (elementStyles.fontSize || 18) * SCALE
          );
          fontSize = `${scaledFontSize}px`;
        }

        if (elementStyles.color) {
          color = elementStyles.color;
        }

        if (elementStyles.fontWeight) {
          fontWeight = elementStyles.fontWeight;
        }

        console.log(`Rendering element ${elementId}:`, {
          position,
          content: content.substring(0, 20),
          scaledX,
          scaledY,
          fontSize,
          fontWeight,
          color,
          elementStyles,
        });

        return (
          <div
            key={elementId}
            className="absolute overflow-hidden leading-tight"
            style={{
              left: `${scaledX}px`,
              top: `${scaledY}px`,
              fontSize,
              fontWeight,
              color,
              maxWidth: `${Math.max(10, PREVIEW_WIDTH - scaledX)}px`,
              maxHeight: `${Math.max(10, PREVIEW_HEIGHT - scaledY)}px`,
              transform: `rotate(${elementStyles.rotation || 0}deg)`,
              transformOrigin: "top left",
            }}
          >
            {content.split("\n").map((line, index) => (
              <div key={index} className="truncate">
                {line.length > 25 ? `${line.substring(0, 25)}...` : line}
              </div>
            ))}
          </div>
        );
      })
      .filter(Boolean); // –£–±–∏—Ä–∞–µ–º null —ç–ª–µ–º–µ–Ω—Ç—ã
  };

  // –†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü –≤ –º–∏–Ω–∏–∞—Ç—é—Ä–µ
  const renderPreviewTableElements = () => {
    const slideTableElements = tableElements[slideNumber] || {};

    return Object.entries(slideTableElements).map(([elementId, tableData]) => {
      const scaledX = (tableData.position?.x || 100) * SCALE;
      const scaledY = (tableData.position?.y || 100) * SCALE;
      const scaledWidth = Math.min(40, 200 * SCALE); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
      const scaledHeight = Math.min(25, 120 * SCALE);

      console.log(`Rendering table ${elementId}:`, {
        originalPosition: tableData.position,
        scaledX,
        scaledY,
        scaledWidth,
        scaledHeight,
      });

      return (
        <div
          key={elementId}
          className="absolute bg-white border border-gray-300 rounded-[1px] overflow-hidden"
          style={{
            left: `${scaledX}px`,
            top: `${scaledY}px`,
            width: `${scaledWidth}px`,
            height: `${scaledHeight}px`,
          }}
        >
          {/* –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã */}
          <div
            className="w-full h-full grid gap-[0.5px] p-[1px]"
            style={{
              gridTemplateColumns: `repeat(${Math.min(
                tableData.cols,
                3
              )}, 1fr)`,
              gridTemplateRows: `repeat(${Math.min(tableData.rows, 3)}, 1fr)`,
            }}
          >
            {Array.from(
              { length: Math.min(tableData.rows * tableData.cols, 9) },
              (_, index) => {
                const row = Math.floor(index / Math.min(tableData.cols, 3));
                const col = index % Math.min(tableData.cols, 3);
                const cellContent = tableData.cells?.[row]?.[col] || "";

                return (
                  <div
                    key={index}
                    className="bg-gray-50 text-[2px] leading-tight overflow-hidden flex items-center justify-center border-[0.5px] border-gray-200"
                  >
                    {cellContent.length > 3
                      ? cellContent.substring(0, 3)
                      : cellContent}
                  </div>
                );
              }
            )}
          </div>
        </div>
      );
    });
  };

  // –†–µ–Ω–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–∏–Ω–∏–∞—Ç—é—Ä–µ
  const renderPreviewImageElements = () => {
    const slideImageElements = imageElements[slideNumber] || {};

    return Object.entries(slideImageElements)
      .map(([elementId, imageData]) => {
        // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const scaledX = (imageData.position?.x || 100) * SCALE;
        const scaledY = (imageData.position?.y || 100) * SCALE;
        const scaledWidth = Math.min(30, (imageData.width || 150) * SCALE);
        const scaledHeight = Math.min(20, (imageData.height || 100) * SCALE);

        console.log(`Rendering image ${elementId}:`, {
          originalPosition: imageData.position,
          originalSize: { width: imageData.width, height: imageData.height },
          scaledX,
          scaledY,
          scaledWidth,
          scaledHeight,
        });

        return (
          <div
            key={elementId}
            className="absolute bg-green-100 border border-green-300 rounded-[1px] flex items-center justify-center"
            style={{
              left: `${scaledX}px`,
              top: `${scaledY}px`,
              width: `${scaledWidth}px`,
              height: `${scaledHeight}px`,
            }}
          >
            {imageData.src ? (
              <img
                src={imageData.src}
                alt={imageData.alt || ""}
                className="w-full h-full object-cover rounded-[1px]"
              />
            ) : (
              <div className="text-[2px] text-green-600 text-center">IMG</div>
            )}
          </div>
        );
      })
      .filter(Boolean); // –£–±–∏—Ä–∞–µ–º null —ç–ª–µ–º–µ–Ω—Ç—ã
  };

  // –†–µ–Ω–¥–µ—Ä –ø—Ä–µ–≤—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–ª–∞–π–¥–∞ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const renderSlidePreview = () => {
    return (
      <div className="w-full h-full bg-white rounded-[4px] relative overflow-hidden border border-[#E5E7EB]">
        {/* HTML —à–∞–±–ª–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω */}

        {/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–≤–µ—Ä—Ö —à–∞–±–ª–æ–Ω–∞ */}
        <div className="relative z-10">
          {renderPreviewTextElements()}
          {renderPreviewTableElements()}
          {renderPreviewImageElements()}
        </div>
      </div>
    );
  };

  // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  if (!isMounted) {
    return (
      <div className="w-full h-full bg-white rounded-[4px] relative overflow-hidden border border-[#E5E7EB]">
        {/* –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è SSR */}
      </div>
    );
  }

  return renderSlidePreview();
};
