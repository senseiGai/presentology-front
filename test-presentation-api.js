#!/usr/bin/env node

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
const axios = require("axios");

const API_BASE_URL = "https://presentology-back-production.up.railway.app";
const token =
  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InJ1c2xhbm1ha2htYXRvdjk5OUBnbWFpbC5jb20iLCJzdWIiOiJjbWZ5ZmdsZHkwMDAycGoxMXZ5aHF0cnpwIiwiaWF0IjoxNzU4NzQ1MTYzLCJleHAiOjE3NjEzMzcxNjN9.i1mcWQQKIB0FvnT2oVfTWpUUkCFXgPCIq9Uhgyjunwk";

const client = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    Authorization: token,
    "Content-Type": "application/json",
  },
});

async function testPresentationFlow() {
  try {
    console.log("üöÄ Starting presentation flow test...");

    // Step 1: Create presentation
    console.log("üìù Step 1: Creating presentation...");
    const createData = {
      title: "–¢–µ—Å—Ç: –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
      description: "—Ç–µ—Å—Ç",
      slug:
        "—Ç–µ—Å—Ç-–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏-–±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤-" +
        Date.now(),
      generatedData: {
        deckTitle:
          "–¢–µ—Å—Ç: –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
        uiSlides: [
          {
            title: "–¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥",
            summary:
              "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ¬´—Ç–µ—Å—Ç¬ª\n–°–ª–æ–≥–∞–Ω: ¬´—Ç–µ—Å—Ç¬ª ‚Äì –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
          },
          {
            title: "–ü—Ä–æ–±–ª–µ–º–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ",
            summary:
              "–ü—Ä–æ–±–ª–µ–º–∞: –Ω–∞ —Ä—ã–Ω–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n–†–µ—à–µ–Ω–∏–µ: ¬´—Ç–µ—Å—Ç¬ª —Å–æ—á–µ—Ç–∞–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
          },
          {
            title: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            summary: "–¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞: 1,5 –º–ª–Ω $\n–£—Å–ª–æ–≤–∏—è: 20% –¥–æ–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
          },
        ],
        userData: {
          topic: "—Ç–µ—Å—Ç",
          goal: "sell",
          audience: "investors",
          expectedAction: "decision",
          keyIdea: "—Ç–µ—Å—Ç",
          tones: ["business"],
          files: [],
        },
        volume: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π",
        imageSource: "–ò–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
        seed: 42,
        concurrency: 5,
      },
      presentationState: {
        textElementPositions: {},
        textElementContents: {},
        textElementStyles: {},
        imageElements: {},
        tableElements: {},
        selectedTemplateIndex: 0,
        selectedStyleIndex: 0,
      },
      templateIds: ["proto_001"],
      isPublic: false,
    };

    const createResponse = await client.post(
      "/presentations/create-with-data",
      createData
    );
    console.log("‚úÖ Presentation created:", createResponse.data.id);

    // Step 2: Generate slides
    console.log("üé® Step 2: Generating slides...");
    const generateData = createData.generatedData;

    const generateResponse = await client.post(
      "/ai-proxy/v1/create/structure/generate-slides",
      generateData
    );
    console.log("‚úÖ Slides generated:", generateResponse.data.success);

    // Step 3: Update presentation with generated data
    console.log("üíæ Step 3: Updating presentation with generated data...");
    const updateData = {
      presentationId: createResponse.data.id,
      presentationData: generateResponse.data,
      templateIds: generateResponse.data.data?.templateIds || ["proto_006"],
      presentationState: {
        textElementPositions: {},
        textElementContents: {},
        textElementStyles: {},
        imageElements: {},
        tableElements: {},
        selectedTemplateIndex: 0,
        selectedStyleIndex: 0,
      },
    };

    const updateResponse = await client.put(
      "/presentations/update-with-data",
      updateData
    );
    console.log("‚úÖ Presentation updated with generated data");
    console.log("üìä Final presentation:", {
      id: updateResponse.data.id,
      title: updateResponse.data.title,
      type: updateResponse.data.type,
      updatedAt: updateResponse.data.updatedAt,
    });

    console.log("üéâ Test completed successfully!");
  } catch (error) {
    console.error("‚ùå Error during test:", {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data,
    });
  }
}

testPresentationFlow();
